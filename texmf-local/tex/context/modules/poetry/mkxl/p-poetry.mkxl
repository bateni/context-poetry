%D \module
%D   [      file=p-poetry,
%D        version=1.001,
%D          title=\CONTEXT\ User Module,
%D       subtitle=typeset Persian poetry,
%D         author={Mohammad Hossein Bateni},
%D           date=\currentdate,
%D      copyright={Mohammad Hossein Bateni},
%D        license=MIT License]

% Poetry: Typesetting Persian poetry in ConTeXt
% Copyright (C) 2025  Mohammad Hossein Bateni

\writestatus{loading}{Loading poetry module}

\unprotect

\ctxloadluafile{p-poetry}

\installnamespace{poetry}
\installcommandhandler \????poetry {poetry} \????poetry

\definedataset[PoetryLines]

\newcount\poetry_count
\poetry_count\zerocount

\newbox\poetry_line_box%
\newbox\poetry_line_box_left%
\newdimen\computed_box_width%
\newdimen\natural_box_width%

\startinterface all
    \setinterfaceconstant {kashida}          {kashida}
    \setinterfaceconstant {extension}        {extension}
    \setinterfacevariable {stacked}          {stacked}
    \setinterfacevariable {staggered}        {staggered}
    \setinterfacevariable {step}             {step}
\stopinterface

\setuppoetry
  [\c!width=\v!fit, % local [availablehsize], broad? [full text width], fit, DIM
   \c!distance=4\emwidth,  
   \c!location=\v!left, % middle, right 
   %%%%\c!separator=\vl\hskip.25em\vl,
   \c!strut=,  %% not implemented
   \c!after=\blank[line], % comes after \par
   \c!kashida=\v!off,
   %%%randomseed=123,
   %style=
   %color=
  ]

\appendtoks
    \setuxvalue{\e!start\currentpoetry}{\startpoetry[\currentpoetry]}%
    \setuxvalue{\e!stop \currentpoetry}{\stoppoetry}%
\to \everydefinepoetry

\tolerant\protected\def\startpoetry[#1]#*[#2]%
  {%
   \begingroup
   \ifarguments
     \def\currentpoetry{}%
   \or
     \doifelseassignment{#1}
       {\edef\currentpoetry{}%
        \setupcurrentpoetry[#1]}
       {\def\currentpoetry{#1}}%
   \else
     \edef\currentpoetry{#1}%
     \setupcurrentpoetry[#2]%
   \fi%
   \usepoetrystyleandcolor\c!style\c!color
   \poetryparameter\c!before%
   \par%
   %% todo: change to sth other than scratchwidth
   %% Figure out environment's width
   \doifelse{\poetryparameter\c!width}{\v!local}
               {\scratchwidth\availablehsize}
             {\doifelse{\poetryparameter\c!width}{\v!fit}
               {\lookup_max_width% MHB
                \scratchwidth\current_max_width}
               {\scratchwidth\poetryparameter\c!width\relax}}%
   %% Figure out location (left, middle, right)
   \edef\poetry_line_location_left_skip{%
     \poetry_skip_for_alignment{\the\availablehsize}{\the\scratchwidth}{\poetryparameter\c!location}}%
  }

\permanent\protected\def\stoppoetry
  {%
   \poetry_save_computed_widths%
   \blank[back]%
   \poetryparameter\c!after%
   \endgroup%
  }

% #1: total width (dimen),  #2: current item's width (dimen),  #3: left, middle, right
\def\poetry_skip_for_alignment#1#2#3{\ctxlua{poetryAlignmentSkip("#1","#2","#3")}}%

%D Next we define the command for adding one line of poetry, which may
%D consist of one or two pieces.

\installnamespace{poetryline}
\installcommandhandler \????poetryline {poetryline} \????poetryline

\setuppoetryline
  [\c!coupling=\v!default, % or +, - (not implemented yet)
   %\c!coupling\c!left=,
   %\c!coupling\c!right=,
   \c!alternative=\v!auto, % stacked, line, step/staggered, middle, left, right
   \c!n=2, % = couplet, or 1 = hemistich
   \c!separator=,  % {\hss - \hss}
   \c!distance=,
   %\c!distance=1cm, % between two hemistichs
   \c!separator\c!extension=\hss,
   \c!before=\blank[standard], % or nothing?
   \c!after=\blank[standard], % or nothing?
   %style=
   %color=
  ]

\appendtoks
  \setuxvalue{\currentpoetryline}{\poetryline[\currentpoetryline]}
\to \everydefinepoetryline
  
\tolerant\protected\def\poetryline[#1]#*[#2]%
  {%
   \begingroup%
   \ifarguments
     \def\currentpoetryline{}%
   \or
     \doifelseassignment{#1}
       {\edef\currentpoetryline{}%
        \setupcurrentpoetryline[#1]}
       {\def\currentpoetryline{#1}}%
   \else
     \edef\currentpoetryline{#1}%
     \setupcurrentpoetryline[#2]%
   \fi%
   %% Figure distance and separator settings
   \edef\poetry_intra_line_distance{\poetrylineparameter\c!distance}%
   \ifempty\poetry_intra_line_distance%
   \edef\poetry_intra_line_distance{\poetryparameter\c!distance}%
   \fi%
   \ifempty\poetry_intra_line_distance\else%
   \edef\poetry_intra_line_distance{\poetryparameter\c!distance}%
   \fi%
   %%
   \edef\poetry_intra_line_separator{\poetrylineparameter\c!separator}%
   \ifempty\poetry_intra_line_separator%
   \edef\poetry_intra_line_separator{\poetryparameter\c!separator}%
   \fi%
   %% Figure out coupling of (half) lines
   \edef\poetry_line_coupling{\poetrylineparameter{\c!coupling}}%
   \edef\poetry_line_coupling_left{\poetrylineparameter{\c!coupling\c!left}}%
   \ifempty\poetry_line_coupling_left\edef\poetry_line_coupling_left{\poetry_line_coupling}\fi%
   \edef\poetry_line_coupling_right{\poetrylineparameter{\c!coupling\c!right}}%
   \ifempty\poetry_line_coupling_right\edef\poetry_line_coupling_right{\poetry_line_coupling}\fi%
   %
   \par%
   \usepoetrylinestyleandcolor\c!style\c!color%
   \poetrylineparameter\c!before%
   %%
   \doifelse{\poetrylineparameter\c!n}{2}
            {\couplet}
            {\singlet}%
  }

\protected\def\check_poetry_line#1#2%
  {% #1: group, #2: content
    \setbox\poetry_line_box\hbox{#2}%
    \natural_box_width=\wd\poetry_line_box%
    \lookup_and_update_group_width{#1}{\the\natural_box_width}%
    \ctxlua{stretchText("\poetryparameter{\c!kashida}", "\group_width")}%
    %% todo: why are the following two lines needed?
    \computed_box_width=\group_width\relax%
    \setbox\poetry_line_box\hbox to \computed_box_width{\unhbox\poetry_line_box}%
  } %% end of check_poetry_line  

\protected\def\singlet#1%
  {%
    \dontleavehmode%
    \check_poetry_line{\poetry_line_coupling_left}{#1}%
    \update_max_width\group_width%
    % only left and right matter. everything else is treated as middle
    \edef\actual_alternative{\poetrylineparameter\c!alternative}%   
    \hbox {%
      \poetry_line_location_left_skip%
      \lookup_max_width%
      \edef\poetry_line_location_left_skip{%
        \poetry_skip_for_alignment{\the\scratchwidth}{\the\wd\poetry_line_box}{\actual_alternative}}%
      \poetry_line_location_left_skip%
        \box\poetry_line_box%
    }%
    \par%
    \poetrylineparameter\c!after%
    \endgroup
  } %% end of singlet

\protected\def\couplet#1#2%
  {%
    \dontleavehmode%
    \edef\actual_alternative{\poetrylineparameter\c!alternative}%
    \doif{\actual_alternative}{\v!step}
         {\edef\actual_alternative{\v!staggered}}%
    %% We need to set these boxes here because the grouping below
    %% will clear the second box.
    \check_poetry_line{\poetry_line_coupling_left}{#1}%
    \edef\group_width_left{\group_width}%
    \setbox\poetry_line_box_left\box\poetry_line_box%
    \check_poetry_line{\poetry_line_coupling_right}{#2}%
    \lookup_max_width%
    %
    \doif{\actual_alternative}{\v!auto}
         {\ifdim\dimexpr\group_width+\group_width_left+%
           \poetry_intra_line_distance>\scratchwidth\relax%
            \edef\actual_alternative{\v!staggered}%
          \else%
            \edef\actual_alternative{\v!line}%
          \fi%
         }%      
    %
    \poetry_line_location_left_skip%
    \hbox to \scratchwidth{%
      \doif{\actual_alternative}{\v!stacked}
           {% stacked
             \edef\poetry_line_location_inner_skip{%
               \poetry_skip_for_alignment{\the\scratchwidth}{\the\wd\poetry_line_box_left}{middle}}%
             \poetry_line_location_inner_skip%
           }%
      \box\poetry_line_box_left%
      \doifelse{\actual_alternative}{\v!line}
               {% line
                 %% a \hss here helps with width=local or FIXED to align lines of
                 %% different couplings more nicely together.
                 %% however, it interferes with an arabic style kashida (leader) between
                 %% broken hemistiches.
                 \poetrylineparameter{\c!separator\c!extension}%
                 \doiftextelse{\poetry_intra_line_separator}
                              {\hbox to \poetry_intra_line_distance{\poetry_intra_line_separator}}
                              {\hskip\poetry_intra_line_distance}%
                 \update_max_width{\the\dimexpr\group_width_left+\group_width+\poetry_intra_line_distance\relax}%
                 \poetrylineparameter{\c!separator\c!extension}%
               }%
               {% stacked or staggered
                 \update_max_width{\the\wd\poetry_line_box_left\relax}%             
                 \egroup\\\poetry_line_location_left_skip%
                 \hbox to \scratchwidth\bgroup%
                 % The following doifelse % could have been simplified
                 % but I couldn't get the % macro expansion to work
                 % properly.
                 \doifelse{\actual_alternative}{\v!stacked}
                          {% stacked
                            \edef\poetry_line_location_inner_skip{%
                              \poetry_skip_for_alignment{\the\scratchwidth}{\the\wd\poetry_line_box}{middle}}%
                          }%
                          {% staggered
                            \edef\poetry_line_location_inner_skip{%
                              \poetry_skip_for_alignment{\the\scratchwidth}{\the\wd\poetry_line_box}{right}}%
                          }%
                 \poetry_line_location_inner_skip%
                 \update_max_width{\the\wd\poetry_line_box\relax}%             
               }%
      \box\poetry_line_box%
    }%
    \poetrylineparameter\c!after%
    \endgroup
  }

%D Poetry (half) lines can be coupled together to have the same 
%D typeset size. So we compute and store in a dataset the maximum width
%D of lines in each group.  
\def\lookup_and_update_group_width#1#2%
  {% #1: group (or "coupling") id,  #2: natural width
    \ctxlua{poetryLookupAndUpdateGroupWidth("\the\poetry_count","#1","#2",
        "\datasetvariable{PoetryLines}{x\the\poetry_count}{y#1}")}%
  }

%D We also need to know the maximum width of each (full) poetry line for
%D the width=fit option.  
\def\update_max_width#1%
  {% #1: width of current line
    \ctxlua{poetryUpdateMaxWidth("\the\poetry_count","#1")}%
  }

\def\lookup_max_width%
  {%
    \edef\current_max_width{\datasetvariable{PoetryLines}{x\the\poetry_count}{max}}%
    \doif{\current_max_width}{nil}{\edef\current_max_width{}}%
    \ifempty\current_max_width%
      \edef\current_max_width{1cm}% Should this be \availablehsize?
    \else%
      \edef\current_max_width{\current_max_width pt}%
    \fi%
  }

%D The above update commands store maximum values in a lua table. At
%D the end of each poetry (i.e., after the corresponding
%D \typing{\\stoppoetry}, we collect and write these down in a dataset.
\def\poetry_save_computed_widths%
  {%
    \ctxlua{poetrySaveComputedWidths(\the\poetry_count)}%
    \global\advance\poetry_count\plusone\relax%
  }

\protect
