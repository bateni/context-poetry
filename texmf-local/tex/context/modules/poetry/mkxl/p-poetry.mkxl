%D \module
%D   [      file=p-poetry,
%D        version=0.1,
%D          title=\CONTEXT\ User Module,
%D       subtitle=typeset Persian poetry,
%D         author={Mohammad Hossein Bateni},
%D           date=\currentdate,
%D      copyright={Mohammad Hossein Bateni},
%D        license=MIT License]

% Poetry: Typesetting Persian poetry in ConTeXt
% Copyright (C) 2025  Mohammad Hossein Bateni

\writestatus{loading}{Loading poetry module}

\unprotect

\installnamespace{poetry}
\installcommandhandler \????poetry {poetry} \????poetry

\definedataset[PoetryLines]

\newcount\poetry_count
\poetry_count\zerocount

\newbox\poetry_line_box%
\newdimen\computed_box_width%
\newdimen\natural_box_width%

% todo: add system variables for new keys, values if needed.

\setuppoetry
  [\c!width=\v!local, % broad [full text width], fit?, DIM
   \c!distance=4\emwidth,  
   \c!location=\v!left, % middle, right 
   %%%%\c!separator=\vl\hskip.25em\vl,
   \c!strut=,  %% not implemented
   \c!after=\blank[line], % comes after \par
   %style=
   %color=
  ]

\appendtoks
    \setuxvalue{\e!start\currentpoetry}{\startpoetry[\currentpoetry]}%
    \setuxvalue{\e!stop \currentpoetry}{\stoppoetry}%
\to \everydefinepoetry

\tolerant\protected\def\startpoetry[#1]#*[#2]%
  {%
   \begingroup
   \ifarguments
     \def\currentpoetry{}%
   \or
     \doifelseassignment{#1}
       {\edef\currentpoetry{}%
        \setupcurrentpoetry[#1]}
       {\def\currentpoetry{#1}}%
   \else
     \edef\currentpoetry{#1}%
     \setupcurrentpoetry[#2]%
   \fi%
   \usepoetrystyleandcolor\c!style\c!color
   \poetryparameter\c!before%
   \par%
   %% todo: change to sth other than scratchwidth
   %% todo: location (middle, etc.)
   \doifelse{\poetryparameter\c!width}{\v!local}
             {\scratchwidth\availablehsize}
             {\doifelse{\poetryparameter\c!width}{\v!broad}
             {\scratchwidth\hsize}
             {\scratchwidth\poetryparameter\c!width\relax}}%
   \ifdim\scratchwidth<\availablehsize\relax
     \advance\rightskip by\dimexpr\availablehsize-\scratchwidth\relax%
   \fi%
  }

\permanent\protected\def\stoppoetry
  {%
   \poetry_save_computed_widths%
   %\par%
   \blank[back]%
   \poetryparameter\c!after%
   %\par
   \endgroup%
  }

%D Next we define the command for adding one line of poetry, which may
%D consist of one or two pieces.

\installnamespace{poetryline}
\installcommandhandler \????poetryline {poetryline} \????poetryline

\setuppoetryline
  [\c!coupling=\v!default, % or NUM, or NUM:NUM?
   %\c!coupling\c!left=,
   %\c!coupling\c!right=,
   \c!alternative=\v!auto, % stacked, line, step or staggered?, middle, left, right
   \c!n=2, % = couplet, or 1 = hemistich
   \c!separator=,  % {\hss - \hss}
   \c!distance=,
   %\c!distance=1cm, % between two hemistichs
   \c!before=\blank[standard], % or nothing?
   \c!after=\blank[standard], % or nothing?
   %style=
   %color=
  ]

\appendtoks
  \setuxvalue{\currentpoetryline}{\poetryline[\currentpoetryline]}
\to \everydefinepoetryline
  
\tolerant\protected\def\poetryline[#1]#*[#2]%
  {%
   \begingroup%
   \ifarguments
     \def\currentpoetryline{}%
   \or
     \doifelseassignment{#1}
       {\edef\currentpoetryline{}%
        \setupcurrentpoetryline[#1]}
       {\def\currentpoetryline{#1}}%
   \else
     \edef\currentpoetryline{#1}%
     \setupcurrentpoetryline[#2]%
   \fi%
   %% Figure distance and separator settings
   \edef\poetry_intra_line_distance{\poetrylineparameter\c!distance}%
   \ifempty\poetry_intra_line_distance%
   \edef\poetry_intra_line_distance{\poetryparameter\c!distance}%
   \fi%
   \ifempty\poetry_intra_line_distance\else%
   \edef\poetry_intra_line_distance{\poetryparameter\c!distance}%
   \fi%
   %%
   \edef\poetry_intra_line_separator{\poetrylineparameter\c!separator}%
   \ifempty\poetry_intra_line_separator%
   \edef\poetry_intra_line_separator{\poetryparameter\c!separator}%
   \fi%
   %% Figure out coupling of (half) lines
   \edef\poetry_line_coupling{\poetrylineparameter{\c!coupling}}%
   \edef\poetry_line_coupling_left{\poetrylineparameter{\c!coupling\c!left}}%
   \ifempty\poetry_line_coupling_left\edef\poetry_line_coupling_left{\poetry_line_coupling}\fi%
   \edef\poetry_line_coupling_right{\poetrylineparameter{\c!coupling\c!right}}%
   \ifempty\poetry_line_coupling_right\edef\poetry_line_coupling_right{\poetry_line_coupling}\fi%
   %
   %coupling:\poetry_line_coupling:\poetry_line_coupling_left:\poetry_line_coupling_right;
   \par%
   \usepoetrylinestyleandcolor\c!style\c!color%
   \poetrylineparameter\c!before%
   %%
   \doifelse{\poetrylineparameter\c!n}{2}
            {\couplet}
            {\singlet}%
  }

\protected\def\check_poetry_line#1#2%
  {% #1: group, #2: content
    \setbox\poetry_line_box\hbox{#2}%
    \natural_box_width=\wd\poetry_line_box%
    \lookup_and_update_group_width{#1}{\the\natural_box_width}%
    \computed_box_width=\group_width\relax%
    \ifdim\natural_box_width<\computed_box_width\relax%
       \setbox\poetry_line_box\hbox to \computed_box_width{\unhbox\poetry_line_box}%
    \fi%
  } %% end of check_poetry_line

\protected\def\singlet#1%
  {%
    \dontleavehmode%
    \check_poetry_line{\poetry_line_coupling_left}{#1}%
    % only left and right matter. everything else is treated as middle
    \edef\actual_alternative{\poetrylineparameter\c!alternative}%
    \hbox to \scratchwidth{%
      \doifnot{\actual_alternative}{\v!left}
              {\hfil}%
      \box\poetry_line_box%
      \doifnot{\actual_alternative}{\v!right}
              {\hfil}%
    }
    \par%
    \poetrylineparameter\c!after%
    \endgroup
  } %% end of singlet

\protected\def\couplet#1#2%
  {%
    \dontleavehmode%
    \check_poetry_line{\poetry_line_coupling_left}{#1}%
    \edef\group_width_left{\group_width}%
    \box\poetry_line_box%
    %
    \doiftextelse{\poetry_intra_line_separator}
      {\hbox to \poetry_intra_line_distance{\poetry_intra_line_separator}}
      {\hskip\poetry_intra_line_distance}
    %    
    \check_poetry_line{\poetry_line_coupling_right}{#2}%
    \box\poetry_line_box%
    \poetrylineparameter\c!after%
    \endgroup
  }
  
\def\lookup_and_update_group_width#1#2%
  {% #1: group id,  #2: natural width
    \ctxlua{poetryLookupAndUpdateGroupWidth("\the\poetry_count","#1","#2",
        "\datasetvariable{PoetryLines}{x\the\poetry_count}{y#1}")}%
  }

\def\poetry_save_computed_widths%
  {%
    \ctxlua{poetrySaveComputedWidths(\the\poetry_count)}%
    \global\advance\poetry_count\plusone\relax%
  }
  
\startluacode
  thirddata           = thirddata           or {}
  thirddata.poetry    = thirddata.poetry    or {}
  
  local poetry        = thirddata.poetry
  poetry.widths       = {}

  function poetryLookupAndUpdateGroupWidth(instance_id, group_id, natural_width, saved_width)
    instance_id = 'x' .. instance_id
    group_id    = 'y' .. group_id

    -- todo: I think the following is not fully flushed until the end of this function, so we can't
    -- pull back the result. Once this works, we can reuse group_width as placeholder for it.
    -- context("\\edef\\poetry_dummy_variable{HI}")  --{\\datasetvariable{PoetryLines}{x0}{ydefault}}")
    -- print('val:', tokens.getters.macro("poetry_dummy_variable"))
    -- the other workaround is to rely on implementation of datasetvariable and look up the table ourselves.
    -- see the code in core-dat.lua line 178.
    
    -- todo: how can we "call" TeX code and get back the results instead of it being written to the TeX stream?
    --    local looked_up_width = context.datasetvariable("PoetryLines", instance_id, group_id) or 0
    local looked_up_width = tonumber(saved_width) or 0

    local instance = poetry.widths[instance_id] or {}
    poetry.widths[instance_id] = instance
    local width = instance[group_id] or 0

    natural_width = tonumber(natural_width:match('[.%d]+'))
    if natural_width > width then
      width = natural_width
    end
    instance[group_id] = width
    
    tokens.setters.macro("group_width", looked_up_width .. 'pt')
  end

  function poetrySaveComputedWidths(instance_id)
    instance_id = 'x' .. instance_id
    local instance = poetry.widths[instance_id]
    local vals = {}
    for k, v in pairs(instance) do
      vals[k] = v
    end
    context.setdataset({"PoetryLines"}, {instance_id}, vals)
  end  
\stopluacode

  
\protect
